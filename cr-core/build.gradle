plugins {
    id "org.standardout.versioneye" version "1.3.0"
    id "com.github.spotbugs" version "4.6.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'maven-publish'

import java.text.SimpleDateFormat;

def env = System.getenv()
def versionInfoFile = new File(sourceSets.main.output.resourcesDir, 'versionInfo.properties')

sourceCompatibility = 1.8
targetCompatibility = 1.8

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://artifactory.terasology.org:8081/artifactory/virtual-repo-live"
    }
}

configurations {
    codeMetrics
}

dependencies {

    codeMetrics(group: 'org.terasology.config', name: 'codemetrics', version: '1.1.0', ext: 'zip')

    checkstyle ('com.puppycrawl.tools:checkstyle:6.17')
    pmd ('net.sourceforge.pmd:pmd-core:5.4.1')
    pmd ('net.sourceforge.pmd:pmd-java:5.4.1')

    compile group: 'brianbb', name: 'jpastebin', version: '1.0.0'
    compile group: 'org.apache.httpcomponents', name: 'httpcomponents-client', version: '4.5.2'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    compile group: 'com.google.guava', name: 'guava', version: '19.0'

    compile ('com.google.apis:google-api-services-drive:v2-rev193-1.20.0') {
        // This exclusion avoids a dependency clash against newer versions of Guava in projects using the CR
        exclude module: 'guava-jdk5'

        // This exclusion avoids a crash when a newer version of jackson is needed in telemetry/snowplow (when the CR is embedded in a Terasology project)
        // TODO: This feels more right to do via transitive dependency edit in Terasology, however while that works in Gradle it is not reflected within IntelliJ
        if (rootProject.name == "Terasology") {
            println "CrashReporter running embedded within Terasology. Excluding own dependency on jackson-core"
            exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        }
    }

    // But on the other hand to be able to run the unit tests successfully while embedded we still do need this
    if (rootProject.name == "Terasology") {
        testCompile group: 'com.google.http-client', name: 'google-http-client-jackson2', version: '1.20.0'
    }

    //compile 'com.google.oauth-client:google-oauth-client-java6:1.19.0'
    //compile 'com.google.oauth-client:google-oauth-client-jetty:1.19.0'
}

def convertGitBranch = { gitBranch ->
    // Remove "origin/" from "origin/develop"
    return gitBranch ? gitBranch.substring(gitBranch.lastIndexOf("/") + 1) : null
}

task createVersionInfoFile {

    doLast {
        logger.lifecycle("Creating $versionInfoFile")

        ant.propertyfile(file: versionInfoFile) {
            ant.entry(key: 'buildNumber', value: env.BUILD_NUMBER)
            ant.entry(key: 'buildId', value: env.BUILD_ID)
            ant.entry(key: 'buildTag', value: env.BUILD_TAG)
            ant.entry(key: 'buildUrl', value: env.BUILD_URL)
            ant.entry(key: 'jobName', value: env.JOB_NAME)
            ant.entry(key: 'gitBranch', value: convertGitBranch(env.GIT_BRANCH))
            ant.entry(key: 'gitCommit', value: env.GIT_COMMIT)
            ant.entry(key: 'displayVersion', value: version)
        }
    }
}

jar.dependsOn createVersionInfoFile


task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task runInteractiveTest(type: JavaExec, dependsOn: testClasses) {
    main = "org.terasology.crashreporter.InteractiveTestCases"
    classpath = files(sourceSets.test.runtimeClasspath)
    args = ['setupForExtraLongMessageException', 'src/test/resources/lengthy_logfile.log', 'en-US']
}

// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    archives sourceJar
    archives javadocJar
}

configure([checkstyleMain, checkstyleTest]) { 
    doFirst {
        def suppressions = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/suppressions.xml")
        // the asFile() method extracts the file from the zip archive and puts it next to checkstyle.xml
        // this procedure should not be done in the config phase, since the clean task would erase the file before it can be used
        suppressions.asFile()
    }
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/checkstyle.xml")
    // this assigns the property variable ${samedir} in checkstyle.xml
    configProperties.samedir = config.asFile().parent
}

pmd {
    incrementalAnalysis = false
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    // includeFilter = resources.text.fromArchiveEntry(configurations.codeMetrics, "findbugs/findbugs-exclude.xml")
}

javadoc {
    failOnError = false
}

publishing {
    publications {
        "CrashReporter"(MavenPublication) {
            // Without this we get a .pom with no dependencies
            from components.java

            repositories {
                maven {
                    name = 'TerasologyOrg'
                    allowInsecureProtocol true // ðŸ˜± - no https on our Artifactory yet

                    if (rootProject.hasProperty("publishRepo")) {
                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties
                        url = "http://artifactory.terasology.org/artifactory/$publishRepo"

                        logger.info("Changing PUBLISH repoKey set via Gradle property to {}", publishRepo)
                    } else {
                        // Support override from the environment to use a different target publish org
                        String deducedPublishRepo = System.getenv()["PUBLISH_ORG"]
                        if (deducedPublishRepo == null || deducedPublishRepo == "") {
                            // If not then default
                            deducedPublishRepo = "libs"
                        }

                        // Base final publish repo on whether we're building a snapshot or a release
                        if (project.version.endsWith('SNAPSHOT')) {
                            deducedPublishRepo += "-snapshot-local"
                        } else {
                            deducedPublishRepo += "-release-local"
                        }

                        logger.info("The final deduced publish repo is {}", deducedPublishRepo)
                        url = "http://artifactory.terasology.org/artifactory/$deducedPublishRepo"
                    }

                    if (rootProject.hasProperty("mavenUser") && rootProject.hasProperty("mavenPass")) {
                        credentials {
                            username = "$mavenUser"
                            password = "$mavenPass"
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }
        }
    }
}

